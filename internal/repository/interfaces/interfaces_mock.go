// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nurhidaylma/lover-app.git/internal/model"
)

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// ReadUserByEmail mocks base method.
func (m *MockDBRepository) ReadUserByEmail(email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByEmail", email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByEmail indicates an expected call of ReadUserByEmail.
func (mr *MockDBRepositoryMockRecorder) ReadUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByEmail", reflect.TypeOf((*MockDBRepository)(nil).ReadUserByEmail), email)
}

// ReadUserById mocks base method.
func (m *MockDBRepository) ReadUserById(id int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserById", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserById indicates an expected call of ReadUserById.
func (mr *MockDBRepositoryMockRecorder) ReadUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserById", reflect.TypeOf((*MockDBRepository)(nil).ReadUserById), id)
}

// ReadUserByUserName mocks base method.
func (m *MockDBRepository) ReadUserByUserName(username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByUserName", username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByUserName indicates an expected call of ReadUserByUserName.
func (mr *MockDBRepositoryMockRecorder) ReadUserByUserName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByUserName", reflect.TypeOf((*MockDBRepository)(nil).ReadUserByUserName), username)
}

// WriteProfile mocks base method.
func (m *MockDBRepository) WriteProfile(arg0 model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProfile indicates an expected call of WriteProfile.
func (mr *MockDBRepositoryMockRecorder) WriteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProfile", reflect.TypeOf((*MockDBRepository)(nil).WriteProfile), arg0)
}

// WriteSwipe mocks base method.
func (m *MockDBRepository) WriteSwipe(arg0 model.Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSwipe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSwipe indicates an expected call of WriteSwipe.
func (mr *MockDBRepositoryMockRecorder) WriteSwipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSwipe", reflect.TypeOf((*MockDBRepository)(nil).WriteSwipe), arg0)
}

// WriteUser mocks base method.
func (m *MockDBRepository) WriteUser(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUser indicates an expected call of WriteUser.
func (mr *MockDBRepositoryMockRecorder) WriteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUser", reflect.TypeOf((*MockDBRepository)(nil).WriteUser), user)
}

// WriteUserPurchase mocks base method.
func (m *MockDBRepository) WriteUserPurchase(arg0 model.UserPurchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUserPurchase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUserPurchase indicates an expected call of WriteUserPurchase.
func (mr *MockDBRepositoryMockRecorder) WriteUserPurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUserPurchase", reflect.TypeOf((*MockDBRepository)(nil).WriteUserPurchase), arg0)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetPremiumUser mocks base method.
func (m *MockRedisRepository) GetPremiumUser(arg0 model.UserPurchase) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremiumUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremiumUser indicates an expected call of GetPremiumUser.
func (mr *MockRedisRepositoryMockRecorder) GetPremiumUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremiumUser", reflect.TypeOf((*MockRedisRepository)(nil).GetPremiumUser), arg0)
}

// GetSwipeCount mocks base method.
func (m *MockRedisRepository) GetSwipeCount(arg0 model.Swipe) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwipeCount indicates an expected call of GetSwipeCount.
func (mr *MockRedisRepositoryMockRecorder) GetSwipeCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeCount", reflect.TypeOf((*MockRedisRepository)(nil).GetSwipeCount), arg0)
}

// SetPremiumUser mocks base method.
func (m *MockRedisRepository) SetPremiumUser(arg0 model.UserPurchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPremiumUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPremiumUser indicates an expected call of SetPremiumUser.
func (mr *MockRedisRepositoryMockRecorder) SetPremiumUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPremiumUser", reflect.TypeOf((*MockRedisRepository)(nil).SetPremiumUser), arg0)
}

// SetSwipeCount mocks base method.
func (m *MockRedisRepository) SetSwipeCount(arg0 model.Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSwipeCount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSwipeCount indicates an expected call of SetSwipeCount.
func (mr *MockRedisRepositoryMockRecorder) SetSwipeCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSwipeCount", reflect.TypeOf((*MockRedisRepository)(nil).SetSwipeCount), arg0)
}
